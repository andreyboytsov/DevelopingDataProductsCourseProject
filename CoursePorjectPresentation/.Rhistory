library(XML);
install.packages("XML");
library(XML);
filename = "LillaTiger.gpx";
doc <- xmlTreeParse(filename, useInternalNodes = T);
install.packages("plotKML");
library(plotKML);
uninstall.packages("plotKML");
install.packages("maptools");
library(maptools)
gpx.raw <- readGPS(i = "gpx", f = filename, type="w")
?gpsbabel
library(maptools)
filename = "LillaTiger.gpx";
gpx.raw <- readGPS(i = "gpx", f = filename, type="w")
path()
?maptools
?readGPS
data(mtcars)
fit9 <- lm(mpg ~ wt, data = mtcars)
sum((mtcars$mpg - mean(mtcars$mpg))^2) / sum((mtcars$mpg - fitted(fit9))^2)
summary(fit9)
fit0 <- lm(mpg ~ 1, data = mtcars)
fit0
summary(fit0)
sum((mtcars$mpg - fitted(fit0))^2) / sum((mtcars$mpg - fitted(fit9))^2)
sqrt(sum((mtcars$mpg - fitted(fit9))^2))/ sqrt(sum((mtcars$mpg - fitted(fit0))^2))
sum((mtcars$mpg - fitted(fit9))^2)/ sum((mtcars$mpg - fitted(fit0))^2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(BodyWeight$Diet)
str(BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?lpoints
?trellis.par.set
?print.trellis
?splom
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
packages.install("ggplot2")
install.packages("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot
?ggplot2
?ggplot
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(Wind, Ozone, data = airquality, facets = . ~ as.factor(Month))
rep(c(0,3),5)
rep(c(0,3),each=5)
library(datasets);
pairs(swiss, panel = panel.smooth,
main = "Swiss data",
col = 3+(swiss$Catholic > 50))
?swiss
data(mtcars);
fit1 <- lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt);
summary(fit1);
mtcars$cyl
as.factor(mtcars$cyl)
fit1 <- lm(mtcars$mpg ~ as.factors(mtcars$cyl) + mtcars$wt);
fit1 <- lm(mtcars$mpg ~ as.factor(mtcars$cyl) + mtcars$wt);
summary(fit1);
fit2 <- lm(mtcars$mpg ~ as.factor(mtcars$cyl));
summary(fit2);
fit3 <- lm(mtcars$mpg ~ as.factor(mtcars$cyl) + mtcars$wt + as.factor(mtcars$cyl)*mtcars$wt);
summary(fit3);
anova(fit1, fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x);
?influence.measures
hatvalues(fit5);
plot(y,x);
plot(x,y);
dfbeta(fit5);
fit6 <- lm(y ~ x - 1);
dfbeta(fit6);
dfbetas(fit5);
install.packages("knitr");
install.packages("knitr");
install.packages("htmltools");
install.packages("jsonlite");
install.packages("knitr")
install.packages("knitr")
install.packages("jsonline")
install.packages("jsonlite")
library(swirl)
sessionInfo
sessionInfo()
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("knitr")
install.packages("knitr")
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt", "colorspace", "CORElearn", "devtools", "digest", "dismo", "e1071", "evaluate", "foreach", "formatR", "Formula", "ggplot2", "gstat", "gtools", "highr", "HistData", "Hmisc", "httpuv", "httr", "intervals", "iterators", "jsonlite", "knitr", "lme4", "manipulate", "maptools", "markdown", "mime", "nortest", "OpenStreetMap", "plotKML", "plotrix", "plyr", "quantreg", "R.matlab", "R6", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "RSAGA", "rstudioapi", "scales", "shiny", "sp", "spacetime", "SparseM", "stringr", "swirl", "testthat", "UsingR", "XML", "zoo"))
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt",
)
)))))))
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt", "colorspace", "CORElearn", "devtools", "digest", "dismo", "e1071", "evaluate", "foreach", "formatR", "Formula", "ggplot2", "gstat", "gtools", "highr", "HistData", "Hmisc", "httpuv", "httr", "intervals", "iterators", "jsonlite", "knitr", "lme4", "manipulate", "maptools", "markdown", "mime", "nortest", "OpenStreetMap", "plotKML", "plotrix", "plyr", "quantreg", "R.matlab", "R6", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "RSAGA", "rstudioapi", "scales", "shiny", "sp", "spacetime", "SparseM", "stringr", "swirl", "testthat", "UsingR", "XML", "zoo"))
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt",
C:\Courses\_SPECIALIZATIONPython\Python1C:\Courses\_SPECIALIZATIONPython\Python1
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt", "colorspace", "CORElearn", "devtools", "digest", "dismo", "e1071", "evaluate", "foreach", "formatR", "Formula", "ggplot2", "gstat", "gtools", "highr", "HistData", "Hmisc", "httpuv", "httr", "intervals", "iterators", "jsonlite", "knitr", "lme4", "manipulate", "maptools", "markdown", "mime", "nortest", "OpenStreetMap", "plotKML", "plotrix", "plyr", "quantreg", "R.matlab", "R6", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "RSAGA", "rstudioapi", "scales", "shiny", "sp", "spacetime", "SparseM", "stringr", "swirl", "testthat", "UsingR", "XML", "zoo"))
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt",
C:\Courses\_SPECIALIZATIONPython\Python1
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt")
gfhjfhgjfghjfghj
install.packages(c("aqp", "BradleyTerry2", "car", "caret", "classInt"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest", "dismo", "e1071", "evaluate", "foreach", "formatR", "Formula", "ggplot2", "gstat", "gtools", "highr", "HistData", "Hmisc", "httpuv", "httr", "intervals", "iterators", "jsonlite", "knitr", "lme4", "manipulate", "maptools", "markdown", "mime", "nortest", "OpenStreetMap", "plotKML", "plotrix", "plyr", "quantreg", "R.matlab", "R6", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "RSAGA", "rstudioapi", "scales", "shiny", "sp", "spacetime", "SparseM", "stringr", "swirl", "testthat", "UsingR", "XML", "zoo"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest",
"dismo"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest",
install.packages(c("colorspace", "CORElearn", "devtools", "digest"
dsfgsdfg
install.packages(c("colorspace", "CORElearn", "devtools", "digest"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest"))
install.packages(c("colorspace", "CORElearn", "devtools", "digest"))
install.packages(c("dismo", "e1071", "evaluate", "foreach", "formatR", "Formula", "ggplot2", "gstat", "gtools", "highr", "HistData", "Hmisc", "httpuv", "httr", "intervals", "iterators", "jsonlite", "knitr", "lme4", "manipulate", "maptools", "markdown", "mime", "nortest", "OpenStreetMap", "plotKML", "plotrix", "plyr", "quantreg", "R.matlab", "R6", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rgdal", "rgeos", "rJava", "rmarkdown", "RSAGA", "scales", "shiny", "sp", "spacetime", "SparseM", "stringr", "swirl", "testthat", "UsingR", "XML", "zoo"))
library(kernlab)
install.packages("kernlab");
library(kernlab);
data(spam);
head(spam);
plot(density(spam$your[spam$type=="nonspam"]), col="blue", main="", xlab="Frequency of 'your'");
lines(density(spam$your[spam$type=="spam"]), col="red");
abline(a = 0.5, col = "black");
abline(v = 0.5, col = "black");
?density
table(prediction, spam$type)/length(spam$type)
prediction <- ifelse(spam$your > 0.5, "spam", "nonspam");
table(prediction, spam$type)/length(spam$type)
?par
publish(title = "DevelopingDataProducts", 'index.html', host='RPubs')
?publish
library(slidify)
library(slidifyLibraries)
publish_rpubs(title = "DevelopingDataProducts", html_file = 'index.html')
ls()
setwd("C:/Courses/_SPECIALIZATIONDataScience/9-DevelopingDataProducts/CourseProject/DevelopingDataProductsCourseProject/CoursePorjectPresentation")
publish_rpubs(title = "DevelopingDataProducts", html_file = 'index.html')
find.package("RCurl")
.libPaths( "")
publish_rpubs(title = "DevelopingDataProducts", html_file = 'index.html')
publish_github(repo = "DevelopingDataProductsCourseProject")
publish_rpubs(title = "DevelopingDataProducts", html_file = 'index.html')
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
